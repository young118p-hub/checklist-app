generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checklists     Checklist[]
  checklistLikes ChecklistLike[]
  reviews        Review[]
  comments       Comment[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  createdAt   DateTime @default(now())

  checklists Checklist[]

  @@map("categories")
}

model Checklist {
  id          String   @id @default(cuid())
  title       String
  description String?
  isTemplate  Boolean  @default(false)
  isPublic    Boolean  @default(false)
  peopleCount Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  items    ChecklistItem[]
  likes    ChecklistLike[]
  reviews  Review[]
  comments Comment[]

  @@map("checklists")
}

model ChecklistItem {
  id          String  @id @default(cuid())
  title       String
  description String?
  quantity    Int?
  unit        String?
  isCompleted Boolean @default(false)
  order       Int

  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model ChecklistLike {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@unique([userId, checklistId])
  @@map("checklist_likes")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@unique([userId, checklistId])
  @@map("reviews")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  checklistId String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("comments")
}
